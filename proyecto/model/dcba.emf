@namespace(uri="http:///dcba.ecore", prefix="dcba")
package dcba;

datatype String : java.lang.String;

datatype EBooleanObject : java.lang.Boolean;

datatype EDoubleObject : java.lang.Double;

datatype EIntegerObject : java.lang.Integer;

datatype EList : org.eclipse.emf.common.util.EList;

datatype EChar : char;

datatype ArrayList : java.util.ArrayList;

class ModelFactory {

	@GenModel(body="ModelFactory modelFactory = null;
org.eclipse.emf.common.util.URI uri = org.eclipse.emf.common.util.URI.createURI(\"platform:/resource/\"+ruta);
org.eclipse.emf.ecore.resource.ResourceSet resourceSet= new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl();
org.eclipse.emf.ecore.resource.Resource resource = resourceSet.createResource(uri);
try {
resource.load(java.util.Collections.EMPTY_MAP);
modelFactory = (ModelFactory) resource.getContents().get(0);
} catch (java.io.IOException e) {
// TO-DO Auto-generated catch block
e.printStackTrace();
}

return modelFactory;
")
	op ModelFactory cargar(String ruta);

	@GenModel(body="ModelFactory modelFactory = this;
org.eclipse.emf.common.util.URI uri = org.eclipse.emf.common.util.URI.createURI(\"platform:/resource/\"+ruta);
org.eclipse.emf.ecore.resource.ResourceSet resourceSet= new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl();
org.eclipse.emf.ecore.resource.Resource resource = resourceSet.createResource(uri);
resource.getContents().add(modelFactory);
try {
resource.save(java.util.Collections.EMPTY_MAP);
} catch (java.io.IOException e) {
// TO-DO Auto-generated catch block
e.printStackTrace();
}

return;
")
	op void salvar(String ruta);

	@GenModel(body="//TODO implementarModelo
")
	op void implementarModelo();
	val domain.Domain#theModelFactory theDomain;
	val ui.UI#theModelFactory theUI;
}

@namespace(uri="http:///dcba/domain.ecore", prefix="dcba.domain")
package domain {
	class Domain {

		@GenModel(body="//TODO implementarModelo
")
		op void implementarModelo();
		ref ModelFactory#theDomain theModelFactory;
		val abstracts.Classifierba[*]#ownedByDomain lstClassifierba;
		ref concreta.ClassDiagramba[*]#lstDomain lstClassDiagramba;
		val concreta.Projectba[*]#ownedByDomain lstProjectba;
		ref ui.UI#theDomain theUI;
	}

	@namespace(uri="http:///dcba/domain/abstracts.ecore", prefix="dcba.domain.abstracts")
	package abstracts {
		class Attributeba {
			attr String defaultValue = " ";
			attr String name = " ";
			ref Classifierba#lstAttributebaC theClassifierba;
			ref Classba#lstAttributeba ownedByClassba;
		}

		class Classba extends Classifierba {
			attr EBooleanObject isAbstract = "false";
			attr EBooleanObject isPersistent = "false";
			attr String type = " ";
			val Attributeba[*]#ownedByClassba lstAttributeba;
			ref Packageba#lstClassba lstPackageba;
			val Methodba[*]#ownedByClassba lstMethodba;
			val Relationshipba[*]#source lstRelationshipSourceba;
			ref Relationshipba[*]#target lstRelationshipTargetba;
		}

		class Classifierba {
			ref Attributeba[*]#theClassifierba lstAttributebaC;
			attr String name = " ";
			ref Domain#lstClassifierba ownedByDomain;
			ref Parameterdba[*]#theClassifierba lstParameterdba;
		}

		class Methodba {
			ref Classba#lstMethodba ownedByClassba;
			attr String name = " ";
			val Parameterdba[*]#ownedByMethodba lstParameterdba;
		}

		class Packageba {
			val Classba[*]#lstPackageba lstClassba;
			attr String name = " ";
			ref Packageba#lstPackageba ownedByPackageba;
			val Packageba[*]#ownedByPackageba lstPackageba;
			ref Projectba#lstPackageba ownedByProjectba;
		}

		class Parameterdba {
			ref Methodba#lstParameterdba ownedByMethodba;
			attr String name = " ";
			ref Classifierba#lstParameterdba theClassifierba;
		}

		class PrimitiveDataTypeba extends Classifierba {
		}

		class Projectba {
			val Packageba[*]#ownedByProjectba lstPackageba;
			attr String name = " ";
			attr String path = " ";
		}

		class Relationshipba {
			ref Classba#lstRelationshipSourceba source;
			attr EBooleanObject isAggregation = "false";
			attr EBooleanObject isAssociation = "false";
			attr EBooleanObject isCompositon = "false";
			attr String isGeneralization = " ";
			attr String multiplicitySource = " ";
			attr String multiplicityTarget;
			attr String rolSource;
			attr String rolTarget;
			ref Classba#lstRelationshipTargetba target;
		}

	}

	@namespace(uri="http:///dcba/domain/concreta.ecore", prefix="dcba.domain.concreta")
	package concreta {
		class AttributeConcreteba {
			attr String nombre = " ";
			attr String type = " ";
			attr String value = " ";
			ref ClassConcreteba#lstAttributeConcreteba ownedByClassConcreteba;
			ref MethodConcreteba#lstAttributeConcreteba ownedByMethodConcreteba;
		}

		class ClassConcreteba {
			attr EBooleanObject ~abstract = "false";
			attr String ~id = " ";
			attr String name = " ";
			attr EBooleanObject serializable = "false";
			val AttributeConcreteba[*]#ownedByClassConcreteba lstAttributeConcreteba;
			val MethodConcreteba[*]#ownedByClassConcreteba lstMethodConcreteba;
			ref ClassDiagramba#lstClassConcreteba ownedByClassDiagramba;
			ref RelationClass[*]#target lstIn;
			ref RelationClass[*]#source lstOut;
		}

		class ClassDiagramba {
			val ClassConcreteba[*]#ownedByClassDiagramba lstClassConcreteba;
			attr String name = " ";
			ref Domain[*]#lstClassDiagramba lstDomain;
			val RelationClass[*]#ownedByClassDiagramba lstRelationClass;
			val PackageConcreteba[*]#ownedByClassDiagramba lstPackageConcreteba;
			ref Projectba#lstClassDiagramba ownedByProjectba;
		}

		class Containment extends RelationClass {
		}

		class Generalizationba extends RelationClass {
		}

		class Implements extends RelationClass {
		}

		class MethodConcreteba {
			ref ClassConcreteba#lstMethodConcreteba ownedByClassConcreteba;
			attr String nombre = " ";
			attr String returnType = " ";
			attr String semantic = " ";
			val AttributeConcreteba[*]#ownedByMethodConcreteba lstAttributeConcreteba;
		}

		class PackageConcreteba {
			ref ClassDiagramba#lstPackageConcreteba ownedByClassDiagramba;
			attr String name = " ";
			attr String path = " ";
		}

		class Projectba {
			val ClassDiagramba[*]#ownedByProjectba lstClassDiagramba;
			attr String name = " ";
			attr String path = " ";
			ref Domain#lstProjectba ownedByDomain;
		}

		class RelationClass {
			ref ClassDiagramba#lstRelationClass ownedByClassDiagramba;
			attr String ~id = " ";
			attr String mulB = " ";
			attr String multA = " ";
			attr String name = " ";
			attr String rolA = " ";
			attr String rolB = " ";
			ref ClassConcreteba#lstIn target;
			ref ClassConcreteba#lstOut source;
		}

	}

}

@namespace(uri="http:///dcba/ui.ecore", prefix="dcba.ui")
package ui {
	class UI {

		@GenModel(body="//TODO implementarModelo
")
		op void implementarModelo();
		ref ModelFactory#theUI theModelFactory;
		ref domain.Domain#theUI theDomain;
	}

	@namespace(uri="http:///dcba/ui/viewmodels.ecore", prefix="dcba.ui.viewmodels")
	package viewmodels {
	}

}

