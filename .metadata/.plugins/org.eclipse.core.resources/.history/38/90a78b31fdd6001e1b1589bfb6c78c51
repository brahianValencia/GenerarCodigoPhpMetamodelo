/**
 */
package abstracta.impl;

import abstracta.AbstractaPackage;
import abstracta.Classba;
import abstracta.Methodba;
import abstracta.Parameter;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Methodba</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link abstracta.impl.MethodbaImpl#getName <em>Name</em>}</li>
 *   <li>{@link abstracta.impl.MethodbaImpl#getOwnedByClassba <em>Owned By Classba</em>}</li>
 *   <li>{@link abstracta.impl.MethodbaImpl#getLstParametersba <em>Lst Parametersba</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodbaImpl extends EObjectImpl implements Methodba {
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getOwnedByClassba() <em>Owned By Classba</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOwnedByClassba()
	 * @generated
	 * @ordered
	 */
	protected Classba ownedByClassba;

	/**
	 * The cached value of the '{@link #getLstParametersba() <em>Lst Parametersba</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLstParametersba()
	 * @generated
	 * @ordered
	 */
	protected EList<Parameter> lstParametersba;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodbaImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return AbstractaPackage.Literals.METHODBA;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, AbstractaPackage.METHODBA__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Classba getOwnedByClassba() {
		if (ownedByClassba != null && ownedByClassba.eIsProxy()) {
			InternalEObject oldOwnedByClassba = (InternalEObject)ownedByClassba;
			ownedByClassba = (Classba)eResolveProxy(oldOwnedByClassba);
			if (ownedByClassba != oldOwnedByClassba) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, AbstractaPackage.METHODBA__OWNED_BY_CLASSBA, oldOwnedByClassba, ownedByClassba));
			}
		}
		return ownedByClassba;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Classba basicGetOwnedByClassba() {
		return ownedByClassba;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setOwnedByClassba(Classba newOwnedByClassba) {
		Classba oldOwnedByClassba = ownedByClassba;
		ownedByClassba = newOwnedByClassba;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, AbstractaPackage.METHODBA__OWNED_BY_CLASSBA, oldOwnedByClassba, ownedByClassba));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Parameter> getLstParametersba() {
		if (lstParametersba == null) {
			lstParametersba = new EObjectContainmentEList<Parameter>(Parameter.class, this, AbstractaPackage.METHODBA__LST_PARAMETERSBA);
		}
		return lstParametersba;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case AbstractaPackage.METHODBA__LST_PARAMETERSBA:
				return ((InternalEList<?>)getLstParametersba()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case AbstractaPackage.METHODBA__NAME:
				return getName();
			case AbstractaPackage.METHODBA__OWNED_BY_CLASSBA:
				if (resolve) return getOwnedByClassba();
				return basicGetOwnedByClassba();
			case AbstractaPackage.METHODBA__LST_PARAMETERSBA:
				return getLstParametersba();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case AbstractaPackage.METHODBA__NAME:
				setName((String)newValue);
				return;
			case AbstractaPackage.METHODBA__OWNED_BY_CLASSBA:
				setOwnedByClassba((Classba)newValue);
				return;
			case AbstractaPackage.METHODBA__LST_PARAMETERSBA:
				getLstParametersba().clear();
				getLstParametersba().addAll((Collection<? extends Parameter>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case AbstractaPackage.METHODBA__NAME:
				setName(NAME_EDEFAULT);
				return;
			case AbstractaPackage.METHODBA__OWNED_BY_CLASSBA:
				setOwnedByClassba((Classba)null);
				return;
			case AbstractaPackage.METHODBA__LST_PARAMETERSBA:
				getLstParametersba().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case AbstractaPackage.METHODBA__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case AbstractaPackage.METHODBA__OWNED_BY_CLASSBA:
				return ownedByClassba != null;
			case AbstractaPackage.METHODBA__LST_PARAMETERSBA:
				return lstParametersba != null && !lstParametersba.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //MethodbaImpl
