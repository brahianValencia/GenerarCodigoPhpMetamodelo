	/*
 * 
 */
package concreta.diagram.part;

	/**
 * @generated
 */
public class ConcretaDiagramUpdater {
		
	/**
 * @generated
 */
public static boolean isShortcutOrphaned(org.eclipse.gmf.runtime.notation.View view) {
	return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
}
	
		/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (concreta.diagram.part.ConcretaVisualIDRegistry.getVisualID(view)) {
		case concreta.diagram.edit.parts.DiagramClassbaEditPart.VISUAL_ID:
	return getDiagramClassba_1000SemanticChildren(view);
case concreta.diagram.edit.parts.ClassbaClassbaLstAttributesbaCompartmentEditPart.VISUAL_ID:
	return getClassbaClassbaLstAttributesbaCompartment_7001SemanticChildren(view);
case concreta.diagram.edit.parts.ClassbaClassbaLstMethodbaCompartmentEditPart.VISUAL_ID:
	return getClassbaClassbaLstMethodbaCompartment_7002SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaNodeDescriptor> getDiagramClassba_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
concreta.DiagramClassba modelElement = (concreta.DiagramClassba) view.getElement();
	java.util.LinkedList<concreta.diagram.part.ConcretaNodeDescriptor> result = new java.util.LinkedList<concreta.diagram.part.ConcretaNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getLstClass().iterator(); it.hasNext();) {
		concreta.Classba childElement = (concreta.Classba) it.next();
					int visualID = concreta.diagram.part.ConcretaVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concreta.diagram.edit.parts.ClassbaEditPart.VISUAL_ID) {
	result.add(new concreta.diagram.part.ConcretaNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaNodeDescriptor> getClassbaClassbaLstAttributesbaCompartment_7001SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concreta.Classba modelElement = (concreta.Classba) containerView.getElement();
	java.util.LinkedList<concreta.diagram.part.ConcretaNodeDescriptor> result = new java.util.LinkedList<concreta.diagram.part.ConcretaNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getLstAttributesba().iterator(); it.hasNext();) {
		concreta.Attributeba childElement = (concreta.Attributeba) it.next();
					int visualID = concreta.diagram.part.ConcretaVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concreta.diagram.edit.parts.AttributebaEditPart.VISUAL_ID) {
	result.add(new concreta.diagram.part.ConcretaNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaNodeDescriptor> getClassbaClassbaLstMethodbaCompartment_7002SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concreta.Classba modelElement = (concreta.Classba) containerView.getElement();
	java.util.LinkedList<concreta.diagram.part.ConcretaNodeDescriptor> result = new java.util.LinkedList<concreta.diagram.part.ConcretaNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getLstMethodba().iterator(); it.hasNext();) {
		concreta.Methodba childElement = (concreta.Methodba) it.next();
					int visualID = concreta.diagram.part.ConcretaVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concreta.diagram.edit.parts.MethodbaEditPart.VISUAL_ID) {
	result.add(new concreta.diagram.part.ConcretaNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (concreta.diagram.part.ConcretaVisualIDRegistry.getVisualID(view)) {
		case concreta.diagram.edit.parts.DiagramClassbaEditPart.VISUAL_ID:
	return getDiagramClassba_1000ContainedLinks(view);
case concreta.diagram.edit.parts.ClassbaEditPart.VISUAL_ID:
	return getClassba_2001ContainedLinks(view);
case concreta.diagram.edit.parts.AttributebaEditPart.VISUAL_ID:
	return getAttributeba_3001ContainedLinks(view);
case concreta.diagram.edit.parts.MethodbaEditPart.VISUAL_ID:
	return getMethodba_3002ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (concreta.diagram.part.ConcretaVisualIDRegistry.getVisualID(view)) {
		case concreta.diagram.edit.parts.ClassbaEditPart.VISUAL_ID:
	return getClassba_2001IncomingLinks(view);
case concreta.diagram.edit.parts.AttributebaEditPart.VISUAL_ID:
	return getAttributeba_3001IncomingLinks(view);
case concreta.diagram.edit.parts.MethodbaEditPart.VISUAL_ID:
	return getMethodba_3002IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (concreta.diagram.part.ConcretaVisualIDRegistry.getVisualID(view)) {
		case concreta.diagram.edit.parts.ClassbaEditPart.VISUAL_ID:
	return getClassba_2001OutgoingLinks(view);
case concreta.diagram.edit.parts.AttributebaEditPart.VISUAL_ID:
	return getAttributeba_3001OutgoingLinks(view);
case concreta.diagram.edit.parts.MethodbaEditPart.VISUAL_ID:
	return getMethodba_3002OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getDiagramClassba_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getClassba_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getAttributeba_3001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getMethodba_3002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getClassba_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getAttributeba_3001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getMethodba_3002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getClassba_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getAttributeba_3001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getMethodba_3002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
				
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<concreta.diagram.part.ConcretaNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return ConcretaDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return ConcretaDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return ConcretaDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<concreta.diagram.part.ConcretaLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return ConcretaDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
